from datetime import datetime
from aiogram import Bot, F, Router
from aiogram.filters import Command
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery,
)
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from config import logger, BINANCE_BASE_URL, COINBASE_URL, KRAKEN_URL, XE_CONVERTER_URL, WISE_URL, PROFEE_URL, BINANCE_QUOTE_ALIAS
from repository import UserRepository, SubscriptionRepository
from service import PriceService, parse_watch_args, infer_asset_type

router = Router()

class ListStates(StatesGroup):
    viewing_list = State()

def main_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –ü–æ–¥–ø–∏—Å–∫–∞"), KeyboardButton(text="üìà –¶–µ–Ω–∞")],
            [KeyboardButton(text="üóÇÔ∏è –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")],
            [KeyboardButton(text="üîï Mute"), KeyboardButton(text="üîî Unmute")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚Ä¶",
    )

def make_exchange_keyboard(base: str, quote: str, price_service: PriceService) -> InlineKeyboardMarkup:
    b, q = base.upper(), quote.upper()
    rows = []

    if not price_service.is_fiat(b) or not price_service.is_fiat(q):
        bq = BINANCE_QUOTE_ALIAS.get(q, q)
        rows.append([
            InlineKeyboardButton(text="Binance",  url=BINANCE_BASE_URL.format(base=b, quote=bq)),
            InlineKeyboardButton(text="Coinbase", url=COINBASE_URL.format(base=b, quote=q)),
            InlineKeyboardButton(text="Kraken",   url=KRAKEN_URL.format(base=b, quote=q)),
        ])

    converter_buttons = []
    converter_buttons.append(InlineKeyboardButton(text="XE Converter", url=XE_CONVERTER_URL.format(base=b, quote=q)))
    converter_buttons.append(InlineKeyboardButton(text="Wise", url=WISE_URL.format(base=b.lower(), quote=q.lower())))
    converter_buttons.append(InlineKeyboardButton(text="Profee", url=PROFEE_URL))
    
    for i in range(0, len(converter_buttons), 2):
        rows.append(converter_buttons[i:i+2])

    return InlineKeyboardMarkup(inline_keyboard=rows)

def create_pagination_keyboard(page: int, total_pages: int, user_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_{user_id}_{page-1}"))
    
    nav_buttons.append(InlineKeyboardButton(text=f"{page+1}/{total_pages}", callback_data="current_page"))
    
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"list_{user_id}_{page+1}"))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    buttons.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_list")])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def send_subscriptions_page(msg: Message, user_id: int, page: int = 0, page_size: int = 5):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        rows = await SubscriptionRepository.get_user_subscriptions(user_id)
        if not rows:
            await msg.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –î–æ–±–∞–≤—å—Ç–µ: /watch BTC > 30000 USD")
            return

        total_subscriptions = len(rows)
        total_pages = (total_subscriptions + page_size - 1) // page_size
        
        if page >= total_pages:
            page = total_pages - 1
        
        start_idx = page * page_size
        end_idx = min(start_idx + page_size, total_subscriptions)
        
        lines = [f"üìã –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å—Ç—Ä. {page+1}/{total_pages}):"]
        
        for i in range(start_idx, end_idx):
            sid, base, quote, op, thr, active = rows[i]
            status = "‚è∏Ô∏è" if not active else "‚úÖ"
            lines.append(f"#{sid}: {base}/{quote} {op} {thr} {status}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        lines.append(f"\nüìä –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: {total_subscriptions}")
        active_count = sum(1 for _, _, _, _, _, active in rows if active)
        lines.append(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}")
        lines.append(f"‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ: {total_subscriptions - active_count}")
        
        response_text = "\n".join(lines)
        kb = create_pagination_keyboard(page, total_pages, user_id)
        
        # –ï—Å–ª–∏ —ç—Ç–æ callback (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã), —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if isinstance(msg, CallbackQuery):
            await msg.message.edit_text(response_text, reply_markup=kb)
        else:
            await msg.answer(response_text, reply_markup=kb)
            
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages} —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        error_msg = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫."
        if isinstance(msg, CallbackQuery):
            await msg.message.edit_text(error_msg)
        else:
            await msg.answer(error_msg)

@router.message(Command("start"))
async def start_cmd(msg: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    await UserRepository.ensure_user(msg.from_user.id)
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø CryptoWatchLive.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /watch BTC > 30000 USD ‚Äî —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "‚Ä¢ /price BTC USD ‚Äî —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å\n"
        "‚Ä¢ /list ‚Äî –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ /pause <id> /resume <id> ‚Äî –ø–∞—É–∑–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ /remove <id> ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
        "‚Ä¢ /clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ\n"
        "‚Ä¢ /mute /unmute ‚Äî –≥–ª–æ–±–∞–ª—å–Ω–æ –≤—ã–∫–ª/–≤–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ."
    )
    await msg.answer(text, reply_markup=main_menu_kb())

@router.message(Command("menu"))
async def menu_cmd(msg: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ menu –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    await msg.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@router.message(Command("watch"))
async def watch_cmd(msg: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ watch –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {msg.text}")
    parsed = parse_watch_args(msg.text or "")
    if not parsed:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã watch –æ—Ç {msg.from_user.id}: {msg.text}")
        await msg.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /watch <BASE> <–æ–ø–µ—Ä–∞—Ç–æ—Ä> <–∑–Ω–∞—á–µ–Ω–∏–µ> <QUOTE?>\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /watch BTC > 30000 USD\n"
            "‚Ä¢ /watch EUR < 95 RUB\n"
            "‚Ä¢ /watch ETH >= 0.06 BTC\n"
        )
        return
    base, quote, threshold, op = parsed
    asset_type = infer_asset_type(base, quote)
    try:
        subscription_id = await SubscriptionRepository.create_subscription(
            msg.from_user.id, base, quote, asset_type, op, threshold, datetime.utcnow().isoformat()
        )
        await msg.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ #{subscription_id} —Å–æ–∑–¥–∞–Ω–∞: {base}/{quote} {op} {threshold}.\n"
            f"–ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —É—Å–ª–æ–≤–∏—è."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {msg.from_user.id}: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(Command("price"))
async def price_cmd(msg: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ price –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {msg.text}")
    parts = (msg.text or "").split()
    if len(parts) < 3:
        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã price –æ—Ç {msg.from_user.id}: {msg.text}")
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price <BASE> <QUOTE>\n–ù–∞–ø—Ä–∏–º–µ—Ä: /price BTC USD –∏–ª–∏ /price EUR RUB")
        return
    base, quote = parts[1].upper(), parts[2].upper()
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã {base}/{quote} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    
    import aiohttp
    async with aiohttp.ClientSession() as session:
        ps = PriceService(session)
        try:
            price, change = await ps.get_price_and_change(base, quote)
            kb = make_exchange_keyboard(base, quote, ps)
            ch_txt = f" ({change:+.2f}% –∑–∞ 24—á)" if change is not None else ""
            response_text = f"–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å {base}/{quote}: {price:.8f}{ch_txt}"
            await msg.answer(response_text, reply_markup=kb)
            logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω–∞ {base}/{quote} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {msg.from_user.id} —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {base}/{quote} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {e}")
            await msg.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {e}")

@router.message(Command("list"))
async def list_cmd(msg: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ list –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    await send_subscriptions_page(msg, msg.from_user.id)

@router.callback_query(F.data.startswith("list_"))
async def handle_list_pagination(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        # data format: "list_{user_id}_{page}"
        parts = callback.data.split("_")
        if len(parts) >= 3:
            user_id = int(parts[1])
            page = int(parts[2])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É
            if callback.from_user.id == user_id:
                await send_subscriptions_page(callback, user_id, page)
            else:
                await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", show_alert=True)

@router.callback_query(F.data == "close_list")
async def handle_close_list(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        await callback.message.delete()
        await callback.answer("–°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä—ã—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏", show_alert=True)

@router.callback_query(F.data == "current_page")
async def handle_current_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    await callback.answer(f"–í—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {callback.message.text.split('—Å—Ç—Ä. ')[1].split(')')[0]}")

def _extract_id_arg(text: str) -> int:
    parts = (text or "").split()
    if len(parts) < 2:
        return None
    try:
        return int(parts[1])
    except Exception:
        return None

@router.message(Command("pause"))
async def pause_cmd(msg: Message):
    sid = _extract_id_arg(msg.text)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ pause –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {sid}")
    if sid is None:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ id: /pause 3")
        return
    try:
        success = await SubscriptionRepository.update_subscription_status(sid, msg.from_user.id, False)
        if not success:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–∞—É–∑—ã –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")
            await msg.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É")
            await msg.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—É–∑–µ –ø–æ–¥–ø–∏—Å–∫–∏ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")

@router.message(Command("resume"))
async def resume_cmd(msg: Message):
    sid = _extract_id_arg(msg.text)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ resume –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {sid}")
    if sid is None:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ id: /resume 3")
        return
    try:
        success = await SubscriptionRepository.update_subscription_status(sid, msg.from_user.id, True)
        if not success:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")
            await msg.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            await msg.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")

@router.message(Command("remove"))
async def remove_cmd(msg: Message):
    sid = _extract_id_arg(msg.text)
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ remove –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ {sid}")
    if sid is None:
        await msg.answer("–£–∫–∞–∂–∏—Ç–µ id: /remove 3")
        return
    try:
        success = await SubscriptionRepository.delete_subscription(sid, msg.from_user.id)
        if not success:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")
            await msg.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id} —É–¥–∞–ª–µ–Ω–∞")
            await msg.answer(f"–ü–æ–¥–ø–∏—Å–∫–∞ #{sid} —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ #{sid} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")

@router.message(Command("clear"))
async def clear_cmd(msg: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ clear –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    try:
        count = await SubscriptionRepository.delete_all_user_subscriptions(msg.from_user.id)
        logger.info(f"–£–¥–∞–ª–µ–Ω—ã –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}, –≤—Å–µ–≥–æ: {count}")
        await msg.answer("–í—Å–µ –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫.")

@router.message(Command("mute"))
async def mute_cmd(msg: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ mute –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    try:
        await UserRepository.update_user_muted_status(msg.from_user.id, True)
        await msg.answer("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. /unmute ‚Äî –≤–∫–ª—é—á–∏—Ç—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@router.message(Command("unmute"))
async def unmute_cmd(msg: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ unmute –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    try:
        await UserRepository.update_user_muted_status(msg.from_user.id, False)
        await msg.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

@router.message(F.text == "üóÇÔ∏è –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
async def btn_list(msg: Message):
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    await send_subscriptions_page(msg, msg.from_user.id)

@router.message(F.text == "‚ûï –ü–æ–¥–ø–∏—Å–∫–∞")
async def btn_subscribe(msg: Message):
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–ü–æ–¥–ø–∏—Å–∫–∞' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    await msg.answer(
        "–°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥–æ–π:\n"
        "‚Ä¢ /watch BTC > 30000 USD\n"
        "‚Ä¢ /watch EUR < 95 RUB\n"
        "‚Ä¢ /watch ETH >= 0.06 BTC"
    )

@router.message(F.text == "üìà –¶–µ–Ω–∞")
async def btn_price(msg: Message):
    logger.info(f"–ö–Ω–æ–ø–∫–∞ '–¶–µ–Ω–∞' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    await msg.answer(
        "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ —Ç–∞–∫: /price <BASE> <QUOTE>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: /price BTC USD"
    )

@router.message(F.text == "üîï Mute")
async def btn_mute(msg: Message):
    logger.info(f"–ö–Ω–æ–ø–∫–∞ 'Mute' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    await mute_cmd(msg)

@router.message(F.text == "üîî Unmute")
async def btn_unmute(msg: Message):
    logger.info(f"–ö–Ω–æ–ø–∫–∞ 'Unmute' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}")
    await unmute_cmd(msg)